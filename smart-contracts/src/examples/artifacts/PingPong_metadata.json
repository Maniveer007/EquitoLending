{
	"compiler": {
		"version": "0.8.27+commit.40a35a09"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_router",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "InvalidLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidMessageSender",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidMessageType",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "chainSelector",
						"type": "uint256"
					}
				],
				"name": "InvalidPeer",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "router",
						"type": "address"
					}
				],
				"name": "InvalidRouter",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "RouterAddressCannotBeZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "RouterAlreadySet",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "sourceChainSelector",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "messageHash",
						"type": "bytes32"
					}
				],
				"name": "PingReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "destinationChainSelector",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "messageHash",
						"type": "bytes32"
					}
				],
				"name": "PingSent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "sourceChainSelector",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "messageHash",
						"type": "bytes32"
					}
				],
				"name": "PongReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "destinationChainSelector",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "messageHash",
						"type": "bytes32"
					}
				],
				"name": "PongSent",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "chainSelector",
						"type": "uint256"
					}
				],
				"name": "getPeer",
				"outputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "lower",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "upper",
								"type": "bytes32"
							}
						],
						"internalType": "struct bytes64",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "peers",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "lower",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "upper",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "blockNumber",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "sourceChainSelector",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "bytes32",
										"name": "lower",
										"type": "bytes32"
									},
									{
										"internalType": "bytes32",
										"name": "upper",
										"type": "bytes32"
									}
								],
								"internalType": "struct bytes64",
								"name": "sender",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "destinationChainSelector",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "bytes32",
										"name": "lower",
										"type": "bytes32"
									},
									{
										"internalType": "bytes32",
										"name": "upper",
										"type": "bytes32"
									}
								],
								"internalType": "struct bytes64",
								"name": "receiver",
								"type": "tuple"
							},
							{
								"internalType": "bytes32",
								"name": "hashedData",
								"type": "bytes32"
							}
						],
						"internalType": "struct EquitoMessage",
						"name": "message",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "messageData",
						"type": "bytes"
					}
				],
				"name": "receiveMessage",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "destinationChainSelector",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "message",
						"type": "string"
					}
				],
				"name": "sendPing",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "chainSelectors",
						"type": "uint256[]"
					},
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "lower",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "upper",
								"type": "bytes32"
							}
						],
						"internalType": "struct bytes64[]",
						"name": "addresses",
						"type": "tuple[]"
					}
				],
				"name": "setPeers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"InvalidPeer(uint256)": [
					{
						"params": {
							"chainSelector": "The chain selector for which the peer address is requested."
						}
					}
				],
				"InvalidRouter(address)": [
					{
						"params": {
							"router": "The address of the router that caused the error."
						}
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"PingReceived(uint256,bytes32)": {
					"params": {
						"messageHash": "The ping message hash.",
						"sourceChainSelector": "The identifier of the source chain."
					}
				},
				"PingSent(uint256,bytes32)": {
					"params": {
						"destinationChainSelector": "The identifier of the destination chain.",
						"messageHash": "The ping message hash."
					}
				},
				"PongReceived(uint256,bytes32)": {
					"params": {
						"messageHash": "The pong message hash.",
						"sourceChainSelector": "The identifier of the source chain."
					}
				},
				"PongSent(uint256,bytes32)": {
					"params": {
						"destinationChainSelector": "The identifier of the destination chain.",
						"messageHash": "The pong message hash."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"_router": "The address of the router contract."
					}
				},
				"getPeer(uint256)": {
					"details": "Throws an error if the chain selector is not found in the mapping.",
					"params": {
						"chainSelector": "The chain selector for which the peer address is requested."
					},
					"returns": {
						"_0": "The peer address for the given chain selector."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": {
					"params": {
						"message": "The Equito message received.",
						"messageData": "The data of the message received."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"sendPing(uint256,string)": {
					"params": {
						"destinationChainSelector": "The identifier of the destination chain.",
						"message": "The ping message."
					}
				},
				"setPeers(uint256[],(bytes32,bytes32)[])": {
					"params": {
						"addresses": "The list of addresses corresponding to the chain selectors.",
						"chainSelectors": "The list of chain selectors."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "PingPong",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"InvalidLength()": [
					{
						"notice": "Thrown when the lengths of arrays are invalid."
					}
				],
				"InvalidMessageSender()": [
					{
						"notice": "Thrown when the sender of a message is invalid."
					}
				],
				"InvalidMessageType()": [
					{
						"notice": "Thrown when an invalid message type is encountered."
					}
				],
				"InvalidPeer(uint256)": [
					{
						"notice": "Thrown when a Peer address is not found in the mapping, given a chain selector."
					}
				],
				"InvalidRouter(address)": [
					{
						"notice": "Thrown when the router address is invalid."
					}
				],
				"RouterAddressCannotBeZero()": [
					{
						"notice": "Thrown when the router address is zero."
					}
				],
				"RouterAlreadySet()": [
					{
						"notice": "Thrown when attempting to set the router, but the router is already set."
					}
				]
			},
			"events": {
				"PingReceived(uint256,bytes32)": {
					"notice": "Event emitted when a ping message is received."
				},
				"PingSent(uint256,bytes32)": {
					"notice": "Event emitted when a ping message is sent."
				},
				"PongReceived(uint256,bytes32)": {
					"notice": "Event emitted when a pong message is received."
				},
				"PongSent(uint256,bytes32)": {
					"notice": "Event emitted when a pong message is sent."
				}
			},
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Initializes the PingPong contract and sets the router address."
				},
				"getPeer(uint256)": {
					"notice": "Returns the peer address for a given chain selector."
				},
				"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": {
					"notice": "Receives a cross-chain message from the Router Contract.         It is a wrapper function for the `_receiveMessage` functions, that need to be overridden.         Only the Router Contract is allowed to call this function."
				},
				"sendPing(uint256,string)": {
					"notice": "Sends a ping message to the specified address on another chain."
				},
				"setPeers(uint256[],(bytes32,bytes32)[])": {
					"notice": "Allows the owner to set the peer addresses for different chain selectors."
				}
			},
			"notice": "This contract implements a simple ping-pong message exchange using the Equito cross-chain messaging protocol.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/examples/PingPong.sol": "PingPong"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"src/EquitoApp.sol": {
			"keccak256": "0x20aff65f10dca8d9b48010d9048632248b1f473fc49f006d5b26bc571e711521",
			"license": "MIT",
			"urls": [
				"bzz-raw://7bf1f256052186a1ef961fcdad6cd09887e75f2f65082ad267b61e19d1d531cf",
				"dweb:/ipfs/QmfTgmwZPEXfW5KxgbnsnhprcmRcH9SoLhCNumuQeTjVDi"
			]
		},
		"src/examples/PingPong.sol": {
			"keccak256": "0x077c3d114be27b4be72f50dd81918d30a47cd4f972e54a1e00f45ef3cdf456d5",
			"license": "MIT",
			"urls": [
				"bzz-raw://3c44083166f109748952ec05cc1ff322c2d81d0552557e7751b4697700fc6bbb",
				"dweb:/ipfs/QmP7nrGjTPapKXS9z725ct1WN3zoGPnPyBw4wgS2HWGQbv"
			]
		},
		"src/interfaces/IEquitoReceiver.sol": {
			"keccak256": "0xb64ed59be348f84a82cc89f4a817ead53b2aa196786e8af9e7459bddcdf6b448",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c2e5787b6f15ff5dcb8dec914377f5cd50a4a585ef17aff4a7563b206795349",
				"dweb:/ipfs/QmVFwhmUGLvmLhbbzsN1GKRiPif46us47151PAXox4ACyp"
			]
		},
		"src/interfaces/IRouter.sol": {
			"keccak256": "0xdf4d80b76f2b627a69c608fdfa3809f1893a83ecac52e0b90d0bf5c1207c25b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6012acac83909878e4a2680c9d5c75b6c9ff2e0f1433b75349738ff5096f75ca",
				"dweb:/ipfs/QmeDBp1WjGG7x48kqrBt1uJduX5SUmBJQAsHY3oAdNaBGJ"
			]
		},
		"src/libraries/EquitoMessageLibrary.sol": {
			"keccak256": "0xcc07267aa6af97e9bb238f44c3d8ec262916625c9a1a8e2510e15e4b6c1d5552",
			"license": "MIT",
			"urls": [
				"bzz-raw://47dd6eb755eaf0fef51d4682cc1297d0da980e3134cc993fc760ecbf42be4d1a",
				"dweb:/ipfs/QmP2YL7KRMw1UhJtvss86HMKiQtqLY7YEGN98GfzSqEEjw"
			]
		},
		"src/libraries/Errors.sol": {
			"keccak256": "0x71f69a5b3d0b5e763564066ad6f8663069f27148b7eaca7f08b87e4107dc9535",
			"license": "MIT",
			"urls": [
				"bzz-raw://e5e7fc2f7a922188b9b19f00ff9eabda587687ee188518054e27226a21df5393",
				"dweb:/ipfs/QmVqKMd9oJdg4cfkdEwcbP3CpHoztnZ1d2e3MAjvKutTt1"
			]
		}
	},
	"version": 1
}